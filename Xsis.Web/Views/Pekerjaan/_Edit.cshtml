<style type="text/css">
    [data-validation-message] {
        display: none;
        color: red;
        font-weight: bold;
    }

        [data-validation-message].message-visible {
            display: block;
        }

    .blueborder {
        border-color: blue;
    }

        .blueborder.invalid {
            border-color: red;
        }
</style>

<form action="" method="post" id="idFrmEditPekerjaan" novalidate>
    <table class="table">
        <tr>
            <td colspan="2">
                <label>Nama Perusahaan/Instansi*</label>
                <input type="text" name="company_name" data-validate="required" class="form-control blueborder" id="idInpNamaPerusahaan" placeholder="Nama Perusahaan">
                <small role="alert"
                       aria-hidden="true"
                       data-validation-message="required">
                    Nama Perusahaan/Instansi Harus Diisi.
                </small>
                <input type="hidden" name="id" id="idget" /> 
            </td>
            <td width="150">
                <label>Kota</label>
                <input type="text" name="city" class="form-control blueborder" id="idInpCity" placeholder="Kota">
            </td>
            <td width="150">
                <label>Negara</label>
                <input type="text" name="country" class="form-control blueborder" id="idInpCountry" placeholder="Negara">
            </td>
        </tr>
        <tr>
            <td width="150">
                <label>Waktu Masuk*</label>
                <select class="form-control  blueborder" name="join_month" data-validate="required" id="idWaktuMasuk">
                    <option value="">-Pilih Bulan-</option>
                    <option value="1">Januari</option>
                    <option value="2">Februari</option>
                    <option value="3">Maret</option>
                    <option value="4">April</option>
                    <option value="5">Mei</option>
                    <option value="6">Juni</option>
                    <option value="7">Juli</option>
                    <option value="8">Agustus</option>
                    <option value="9">September</option>
                    <option value="10">Oktober</option>
                    <option value="11">November</option>
                    <option value="12">Desember</option>
                </select>
                <small role="alert"
                       aria-hidden="true"
                       data-validation-message="required">
                    Bulan Masuk Harus Diisi.
                </small>
            </td>
            <td width="150">
                <label>&nbsp;</label>
                <select class="form-control  blueborder" name="join_year" data-validate="required" id="idTahunMasuk">
                    <option value="">-Pilih Tahun-</option>
                </select>
                <small role="alert"
                       aria-hidden="true"
                       data-validation-message="required">
                    Tahun Masuk Harus Diisi.
                </small>
            </td>
            <td>
                <label>Waktu Keluar</label>
                <select class="form-control  blueborder" name="resign_month" id="idWaktuKeluar">
                    <option value="">-Pilih Bulan-</option>
                    <option value="1">Januari</option>
                    <option value="2">Februari</option>
                    <option value="3">Maret</option>
                    <option value="4">April</option>
                    <option value="5">Mei</option>
                    <option value="6">Juni</option>
                    <option value="7">Juli</option>
                    <option value="8">Agustus</option>
                    <option value="9">September</option>
                    <option value="10">Oktober</option>
                    <option value="11">November</option>
                    <option value="12">Desember</option>
                </select>
            </td>
            <td>
                <label>&nbsp;</label>
                <select class="form-control  blueborder" name="resign_year" id="idTahunKeluar" @*data-validate="TahunValid"*@>
                    <option value="">-Pilih Tahun-</option>
                </select>
            </td>
        </tr>
        <tr>
            <td colspan="2">
                <label>Posisi Terakhir*</label>
                <input type="text" name="last_position" class="form-control blueborder" data-validate="required" id="idInpNamaPosisi" placeholder="Posisi Terakhir">
                <small role="alert"
                       aria-hidden="true"
                       data-validation-message="required">
                    Posisi Terakhir Harus Diisi.
                </small>
            </td>
            <td colspan="2">
                <label>Penghasilan Terakhir (IDR)</label>
                <input type="text" name="income" class="form-control blueborder" id="idInpIncome" placeholder="Income">
            </td>
        </tr>
        <tr>
            <td colspan="4">
                <input type="checkbox" name="is_it_related" id="idCheckBox" class="blueborder" value=true> <label>IT Related ?</label>
            </td>
        </tr>
        <tr>
            <td colspan="4">
                <label>Keterangan Singkat Mengenai Pekerjaan</label>
                <textarea class="form-control blueborder" id="idKeterangan" name="about_job" rows="3"></textarea>
            </td>
        </tr>
        <tr>
            <td colspan="4">
                <label>Alasan Keluar</label>
                <textarea class="form-control blueborder" id="idExit" name="exit_reason" rows="2"></textarea>
            </td>
        </tr>
        <tr>
            <td colspan="4">
                <label>Catatan</label>
                <textarea class="form-control blueborder" id="idCatatan" name="notes" rows="3"></textarea>
            </td>
        </tr>
        <tr>
            <td colspan="4" align="right">
                <button type="button" class="btn orenwoy" id="idBtnCancelPekerjaan">&nbsp;Batal&nbsp;</button>
                <button type="submit" class="btn biruwoy" id="idBtnEditPekerjaan">Simpan</button>
            </td>
        </tr>
    </table>
</form>
<script>
    $(document).ready(function () {

        var d = new Date();
        var vOption = "";
        for (var i = d.getFullYear() ; i >= 1990; i--) {
            vOption = vOption +
            '<option>' + i + '</option>'
        }
        $('#idTahunMasuk').append(vOption);
        $('#idTahunKeluar').append(vOption);

        $.ajax({
            url: '/Pekerjaan/AmbilData',
            data: { ID: $('#idget').val() },
            method: 'Get',
            success: function (mdl) {
                debugger;
                $('#idInpNamaPerusahaan').val(mdl.company_name);
                $('#idInpCity').val(mdl.city);
                $('#idInpCountry').val(mdl.country);
                $('#idWaktuMasuk').val(mdl.join_month).selected;
                $('#idTahunMasuk').val(mdl.join_year).selected;
                $('#idWaktuKeluar').val(mdl.resign_month).selected;
                $('#idTahunKeluar').val(mdl.resign_year).selected;
                $('#idInpNamaPosisi').val(mdl.last_position);
                $('#idInpIncome').val(mdl.income);
                var cek = mdl.is_it_related;
                $('#idCheckBox').attr('checked', cek);
                $('#idKeterangan').val(mdl.about_job);
                $('#idExit').val(mdl.exit_reason);
                $('#idCatatan').val(mdl.notes);
            }
        });
    });

    $('#idBtnCancelPekerjaan').click(function () {
        $('#idMdlEditPekerjaan').close;
        location.reload();
    });

    $('.ClBtnClosePekerjaan').click(function () {
        $('#idMdlCreatePekerjaan').close;
        location.reload();
    });

    function editpekerjaan() {
        //$('#idBtnEditPekerjaan').click(function () {
        //    debugger;
        var vDatapekerjaan = $('#idFrmEditPekerjaan').serialize();
        $.ajax({
            url: '/Pekerjaan/EditSimpan',
            data: vDatapekerjaan,
            method: 'Post',
            success: function (mdl) {
                debugger;
                if (mdl.EditSimpan == "Berhasil") {
                    alert("Data berhasil disimpan");
                    //$('.modal').modal('hide');
                    //$.modal.close();
                    $('#idMdlEditPekerjaan').close;
                    location.reload();
                }
                else {
                    debugger;
                    alert("Data gagal disimpan");
                }
            }
        });
    }

</script>
<script>
// (1) Defining our validator-functions
//     for later use. They return
//     "true", if the validation passes.

    const validators = {
  // Checks the field for emptiness.
    required: element => element.value.length > 0,

  // Checks if there are no numbers
  // in the field.
  noNumbers: element => !element.value.match(/[0-9]/g),

  // Checks if the value is shorter
  // than 10 characters.
  maxLength: element => element.value.length <= 10,

  //TahunValid: element => document.getElementById("idTahunMasuk").value <= document.getElementById("idTahunKeluar").value,

  //BulanValid: element => (parseInt(document.getElementById("idTahunMasuk").value) == parseInt(document.getElementById("idTahunKeluar").value) && parseInt(document.getElementById("idWaktuMasuk").value) <= parseInt(document.getElementById("idWaktuKeluar").value)),
  // Checks if the checkbox is checked.
  mustBeChecked: element => element.checked
};

// (2) Check the contents of an input,
//     get all validators, and mark
//     the field in case of invalidity.
function validateElement(element) {
  resetValidation(element);

  // Store all validators from the
  // data-validate-attribute into
  // an array.
  const rules = element.dataset.validate.split(" ");

  // For every validator on the
  // field...
  rules.forEach(rule => {
    // ...find the corresponding
    // validator-function from our
    // object from #1 and call it
    // with the element as parameter.
    if (validators[rule](element)) {
      // If the function returns true, all is fine.
        debugger;
        return;
    } else {
      // If it returns false, the
      // validation failed.
      // In that case, the
      // markElementInvalid-function
      // takes care of showing the
      // error-message.
      markElementInvalid(element, rule);
    }
  });
}

// (3) Adds classes to an element,
//     so it appears invalid. Also
//     it picks the correct feedback-
//     message and sets it visible.
function markElementInvalid(element, validatorName) {
  element.classList.add("invalid");
  element.setAttribute("aria-invalid", true);
  const feedbackMessage = element.parentNode.querySelector(
    `[data-validation-message=${validatorName}]`
  );
  feedbackMessage.classList.add("message-visible");
  feedbackMessage.setAttribute("aria-hidden", false);
}

// (4) Removes all traces of
//     validation from an element,
//     like the error-messages and
//     the styling.
//     (Pretty much the opposite of #3)
function resetValidation(element) {
  element.classList.remove("invalid");
  element.setAttribute("aria-invalid", false);
  element.parentNode
    .querySelectorAll("[data-validation-message]")
    .forEach(e => {
      e.classList.remove("message-visible");
      e.setAttribute("aria-hidden", true);
    });
}

// (5) Store the form and its
//     inputs in variables.
const form = document.getElementById("idFrmEditPekerjaan");
const formElements = Array.from(form.elements);

// (6) Every input gets an
//     event-listener attached.
formElements.forEach(formElement => {
  // Do nothing if the element has
  // no data-validate-attribute.
  if (!formElement.dataset) return;
  if (!formElement.dataset.validate) return;

  // Attach the blur-event-listener
  // to the element.
  formElement.addEventListener("", () => {
    // This means, validateElement will
    // be called everytime the element
    // loses focus.
    validateElement(formElement);
  });
});

// (7) We're doing what we did at #3,
//     only on form-submit, and for
//     every field.
form.addEventListener("submit", event => {
  // Let's assume, everything is fine.
  let formIsValid = true;
  form.classList.remove("invalid");
  debugger;
  // We'll check every field in the form.
  // (same as #3)
  formElements.forEach(formElement => {
    if (!formElement.dataset) return;
    if (!formElement.dataset.validate) return;
    validateElement(formElement);
  });

  // If there are any "invalid"-classes
  // after we checked all fields, the form
  // is invalid...
  formIsValid = form.querySelectorAll(".invalid").length === 0;

  // ...and will not be submitted.
  if (formIsValid === false) {
    form.classList.add("invalid");
    event.preventDefault();
  }
  else {
      if ($('#idTahunKeluar').val() != "") {
          debugger;
          if ($('#idTahunKeluar').val() < $('#idTahunMasuk').val()) {
              debugger;
              alert('Tahun Keluar Tidak Valid');
              document.getElementById("idTahunKeluar").focus();
              event.preventDefault();
          }
          else if ($('#idTahunKeluar').val() == $('#idTahunMasuk').val()) {
              debugger;
              if ($('#idWaktuKeluar').val() != "") {
                  debugger;
                  if ($('#idWaktuKeluar').val() < $('#idWaktuMasuk').val()) {
                      debugger;
                      alert('Bulan Keluar Tidak Valid');
                      event.preventDefault();
                  }
                  else {
                      event.currentTarget.submit();
                      debugger;
                      editpekerjaan();
                  }
              }
              else {
                  debugger;
                  editpekerjaan();
              }
          }
          else if ($('#idTahunKeluar').val() > $('#idTahunMasuk').val()) {
              debugger;
              editpekerjaan();
          }
      }
      else {
          debugger;
          editpekerjaan();
      }
  }
});
</script>